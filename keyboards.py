from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Optional

class Keyboards:
    """Enhanced keyboard manager with improved organization and flexibility."""
    
    
    @staticmethod
    def subscription_keyboard() -> InlineKeyboardMarkup:
        """Create a beautiful subscription keyboard."""
        buttons = [
            [
                InlineKeyboardButton(
                    "üåü ÿßÿ¥ÿ™ÿ±ŸÉ ŸÅŸä ŸÇŸÜÿßÿ™ŸÜÿß ÿßŸÑÿ±ÿ≥ŸÖŸäÿ©",
                    url="https://t.me/{FORCED_CHANNEL_USERNAME}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úÖ ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ",
                    callback_data="check_subscription"
                )
            ],
            [
                InlineKeyboardButton(
                    "üíé ŸÖÿ™ÿ¨ÿ± ÿßŸÑÿØÿßŸäŸÖŸàŸÜÿØ",
                    url="https://t.me/diamond_store_sy_bot"
                )
            ]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def force_subscription() -> InlineKeyboardMarkup:
        """Keyboard for forcing subscription."""
        buttons = [
            [
                InlineKeyboardButton(
                    "üì¢ ÿßÿ¥ÿ™ÿ±ŸÉ ÿßŸÑÿ¢ŸÜ",
                    url="https://t.me/{FORCED_CHANNEL_USERNAME}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üîÑ ÿ™ÿ≠ÿØŸäÿ´",
                    callback_data="check_subscription"
                )
            ]
        ]
        return InlineKeyboardMarkup(buttons)
    @staticmethod
    def main_menu(is_admin: bool = False) -> InlineKeyboardMarkup:
        """Main menu keyboard with improved organization."""
        buttons = [
            [InlineKeyboardButton("üíé ÿßŸÑŸÖÿ™ÿ¨ÿ±", callback_data="shop")],
            [InlineKeyboardButton("üí∞ ÿ¥ÿ≠ŸÜ ÿ±ÿµŸäÿØ", callback_data="charge")],
            [
                InlineKeyboardButton("üí≥ ÿ±ÿµŸäÿØŸä", callback_data="my_balance"),
                InlineKeyboardButton("üì¶ ÿ∑ŸÑÿ®ÿßÿ™Ÿä", callback_data="my_orders")
            ]
        ]
        if is_admin:
            buttons.append([InlineKeyboardButton("‚öôÔ∏è ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ", callback_data="admin_panel")])
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def shop_menu() -> InlineKeyboardMarkup:
        """Shop menu keyboard."""
        buttons = [
            [
                InlineKeyboardButton("üéÆ ÿßŸÑÿ£ŸÑÿπÿßÿ®", callback_data="games"),
                InlineKeyboardButton("üì± ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™", callback_data="apps")
            ],
            [InlineKeyboardButton("üîô ÿ±ÿ¨Ÿàÿπ", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def payment_methods() -> InlineKeyboardMarkup:
        """Enhanced payment methods keyboard with new payment options."""
        buttons = [
            # Cryptocurrency options
            [InlineKeyboardButton("üíé USDT/USD", callback_data="pay_type_crypto")],
            # Mobile payment options
            [
                InlineKeyboardButton("üì± ÿ≥Ÿäÿ±Ÿäÿßÿ™ŸäŸÑ ŸÉÿßÿ¥", callback_data="pay_type_syriatel"),
                InlineKeyboardButton("üì± MTN ŸÉÿßÿ¥", callback_data="pay_type_mtn")
            ],
            # Sham Cash
            [InlineKeyboardButton("üí∞ ÿ¥ÿßŸÖ ŸÉÿßÿ¥", callback_data="pay_type_shamcash")],
            # Back button
            [InlineKeyboardButton("üîô ÿ±ÿ¨Ÿàÿπ", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def crypto_payment_options() -> InlineKeyboardMarkup:
        """Cryptocurrency payment options keyboard."""
        buttons = [
            [
                InlineKeyboardButton("üí∞ Coinex (USDT)", callback_data="pay_crypto_coinex"),
                InlineKeyboardButton("üí∞ CWallet (USDT)", callback_data="pay_crypto_cwallet")
            ],
            [
                InlineKeyboardButton("üíµ Payeer (USD)", callback_data="pay_crypto_payeer"),
                InlineKeyboardButton("üí∞ PEB20 (USDT)", callback_data="pay_crypto_peb20")
            ],
            [InlineKeyboardButton("üîô ÿ±ÿ¨Ÿàÿπ", callback_data="charge")]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def shamcash_options() -> InlineKeyboardMarkup:
        """Sham Cash payment options keyboard."""
        buttons = [
            [
                InlineKeyboardButton("üíµ ÿ™ÿ≠ŸàŸäŸÑ ŸÑŸäÿ±ÿ© ÿ≥Ÿàÿ±Ÿä", callback_data="sham_syp"),
                InlineKeyboardButton("üí∞ ÿ™ÿ≠ŸàŸäŸÑ USD", callback_data="sham_usd")
            ],
            [InlineKeyboardButton("üîô ÿ±ÿ¨Ÿàÿπ", callback_data="charge")]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def admin_panel() -> InlineKeyboardMarkup:
        """Enhanced admin panel keyboard."""
        buttons = [
            [InlineKeyboardButton("üìä ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™", callback_data="admin_stats")],
            [
                InlineKeyboardButton("üë• ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ", callback_data="manage_users"),
                InlineKeyboardButton("üí∞ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™", callback_data="manage_products")
            ],
            [
                InlineKeyboardButton("üí≥ ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ¥ÿ≠ŸÜ", callback_data="admin_recharges"),
                InlineKeyboardButton("üì¶ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™", callback_data="admin_orders")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™", callback_data="admin_settings"),
                InlineKeyboardButton("üí± ÿ£ÿ≥ÿπÿßÿ± ÿßŸÑÿµÿ±ŸÅ", callback_data="admin_rates")
            ],
            [InlineKeyboardButton("üîô ÿ±ÿ¨Ÿàÿπ", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def manage_products() -> InlineKeyboardMarkup:
        """Product management keyboard."""
        buttons = [
            [
                InlineKeyboardButton("üéÆ ÿßŸÑÿ£ŸÑÿπÿßÿ®", callback_data="manage_games"),
                InlineKeyboardButton("üì± ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™", callback_data="manage_apps")
            ],
            [InlineKeyboardButton("üîô ÿ±ÿ¨Ÿàÿπ", callback_data="admin_panel")]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def product_management(product_id: str, category: str) -> InlineKeyboardMarkup:
        """Individual product management keyboard."""
        buttons = [
            [InlineKeyboardButton("‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™", callback_data=f"edit_info_{category}_{product_id}")],
            [InlineKeyboardButton("üí∞ ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ£ÿ≥ÿπÿßÿ±", callback_data=f"edit_prices_{category}_{product_id}")],
            [InlineKeyboardButton("üóë ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨", callback_data=f"delete_{category}_{product_id}")],
            [InlineKeyboardButton("üîô ÿ±ÿ¨Ÿàÿπ", callback_data=f"manage_{category}")]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def confirm_action(action: str, data: str) -> InlineKeyboardMarkup:
        """Generic confirmation keyboard."""
        buttons = [
            [
                InlineKeyboardButton("‚úÖ ÿ™ÿ£ŸÉŸäÿØ", callback_data=f"confirm_{action}_{data}"),
                InlineKeyboardButton("‚ùå ÿ•ŸÑÿ∫ÿßÿ°", callback_data=f"cancel_{action}_{data}")
            ]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def back_button(callback_data: str) -> InlineKeyboardMarkup:
        """Generic back button."""
        return InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô ÿ±ÿ¨Ÿàÿπ", callback_data=callback_data)
        ]])

    @staticmethod
    def user_contact(user_id: int, username: Optional[str] = None) -> InlineKeyboardMarkup:
        """Enhanced user contact button."""
        if username:
            url = f"https://t.me/{username}"
            buttons = [[InlineKeyboardButton("üí¨ ÿ™ŸàÿßÿµŸÑ", url=url)]]
        else:
            url = f"tg://user?id={user_id}"
            buttons = [[InlineKeyboardButton("üí¨ ÿ™ŸàÿßÿµŸÑ", url=url)]]
        return InlineKeyboardMarkup(buttons)
    
    
def get_start_keyboard(self) -> InlineKeyboardMarkup:
    """Get the start keyboard."""
    return self.main_menu()

def get_admin_keyboard(self) -> InlineKeyboardMarkup:
    """Get admin panel keyboard."""
    return self.admin_panel()

def get_cancel_keyboard(self) -> InlineKeyboardMarkup:
    """Get cancel keyboard."""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("‚ùå ÿ•ŸÑÿ∫ÿßÿ°", callback_data="cancel")
    ]])